/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.4.2.0 (NJsonSchema v10.1.11.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

export class UsersClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    register(request: UserRegisterRequest | null): Promise<UserRegisterResponse> {
        let url_ = this.baseUrl + "/api/users";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRegister(_response);
        });
    }

    protected processRegister(response: Response): Promise<UserRegisterResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 201) {
            return response.text().then((_responseText) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result201 = UserRegisterResponse.fromJS(resultData201);
            return result201;
            });
        } else if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserRegisterResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<UserRegisterResponse>(<any>null);
    }
}

export class SelfClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    login(request: UserLoginRequest | null): Promise<UserLoginResponse> {
        let url_ = this.baseUrl + "/api/self/login";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processLogin(_response);
        });
    }

    protected processLogin(response: Response): Promise<UserLoginResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserLoginResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<UserLoginResponse>(<any>null);
    }

    logout(): Promise<void> {
        let url_ = this.baseUrl + "/api/self/logout";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processLogout(_response);
        });
    }

    protected processLogout(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    getCurrentUser(): Promise<UserLoginResponse> {
        let url_ = this.baseUrl + "/api/self";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCurrentUser(_response);
        });
    }

    protected processGetCurrentUser(response: Response): Promise<UserLoginResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserLoginResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<UserLoginResponse>(<any>null);
    }
}

export class PalletsClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    runPallet(request: PalletRunRequest | null): Promise<PalletRunResult> {
        let url_ = this.baseUrl + "/api/pallet/run";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRunPallet(_response);
        });
    }

    protected processRunPallet(response: Response): Promise<PalletRunResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<PalletRunResult>(<any>null);
    }

    finishPallet(request: PalletFinishRequest | null): Promise<void> {
        let url_ = this.baseUrl + "/api/pallet/finish";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processFinishPallet(_response);
        });
    }

    protected processFinishPallet(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    addPallet(request: PalletAddRequest | null): Promise<PalletAddResult> {
        let url_ = this.baseUrl + "/api/pallet/add";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <RequestInit>{
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAddPallet(_response);
        });
    }

    protected processAddPallet(response: Response): Promise<PalletAddResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<PalletAddResult>(<any>null);
    }

    getPallets(): Promise<PalletInformation[]> {
        let url_ = this.baseUrl + "/api/pallet/list";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetPallets(_response);
        });
    }

    protected processGetPallets(response: Response): Promise<PalletInformation[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(PalletInformation.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<PalletInformation[]>(<any>null);
    }
}

export class ProgramClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    addProgram(request: ProgramAddRequest | null): Promise<void> {
        let url_ = this.baseUrl + "/api/program/add";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <RequestInit>{
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAddProgram(_response);
        });
    }

    protected processAddProgram(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    getPrograms(): Promise<ProgramInformation[]> {
        let url_ = this.baseUrl + "/api/program/list";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetPrograms(_response);
        });
    }

    protected processGetPrograms(response: Response): Promise<ProgramInformation[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ProgramInformation.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ProgramInformation[]>(<any>null);
    }
}

export class UserRegisterResponse implements IUserRegisterResponse {
    status!: UserRegisterStatus;
    username?: string | null;
    temporaryPassword?: string | null;

    constructor(data?: IUserRegisterResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.status = _data["status"] !== undefined ? _data["status"] : <any>null;
            this.username = _data["username"] !== undefined ? _data["username"] : <any>null;
            this.temporaryPassword = _data["temporaryPassword"] !== undefined ? _data["temporaryPassword"] : <any>null;
        }
    }

    static fromJS(data: any): UserRegisterResponse {
        data = typeof data === 'object' ? data : {};
        let result = new UserRegisterResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["status"] = this.status !== undefined ? this.status : <any>null;
        data["username"] = this.username !== undefined ? this.username : <any>null;
        data["temporaryPassword"] = this.temporaryPassword !== undefined ? this.temporaryPassword : <any>null;
        return data; 
    }
}

export interface IUserRegisterResponse {
    status: UserRegisterStatus;
    username?: string | null;
    temporaryPassword?: string | null;
}

export enum UserRegisterStatus {
    Success = "Success",
    UserExists = "UserExists",
    UsernameIsEmpty = "UsernameIsEmpty",
    UsernameContainsWhitespace = "UsernameContainsWhitespace",
}

export class UserRegisterRequest implements IUserRegisterRequest {
    username?: string | null;
    password?: string | null;

    constructor(data?: IUserRegisterRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.username = _data["username"] !== undefined ? _data["username"] : <any>null;
            this.password = _data["password"] !== undefined ? _data["password"] : <any>null;
        }
    }

    static fromJS(data: any): UserRegisterRequest {
        data = typeof data === 'object' ? data : {};
        let result = new UserRegisterRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["username"] = this.username !== undefined ? this.username : <any>null;
        data["password"] = this.password !== undefined ? this.password : <any>null;
        return data; 
    }
}

export interface IUserRegisterRequest {
    username?: string | null;
    password?: string | null;
}

export class UserLoginResponse implements IUserLoginResponse {
    result!: UserLoginResult;
    userId?: string | null;
    username?: string | null;
    role!: Role;

    constructor(data?: IUserLoginResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.result = _data["result"] !== undefined ? _data["result"] : <any>null;
            this.userId = _data["userId"] !== undefined ? _data["userId"] : <any>null;
            this.username = _data["username"] !== undefined ? _data["username"] : <any>null;
            this.role = _data["role"] !== undefined ? _data["role"] : <any>null;
        }
    }

    static fromJS(data: any): UserLoginResponse {
        data = typeof data === 'object' ? data : {};
        let result = new UserLoginResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result !== undefined ? this.result : <any>null;
        data["userId"] = this.userId !== undefined ? this.userId : <any>null;
        data["username"] = this.username !== undefined ? this.username : <any>null;
        data["role"] = this.role !== undefined ? this.role : <any>null;
        return data; 
    }
}

export interface IUserLoginResponse {
    result: UserLoginResult;
    userId?: string | null;
    username?: string | null;
    role: Role;
}

export enum UserLoginResult {
    Success = "Success",
    PasswordOrUsernameError = "PasswordOrUsernameError",
}

export enum Role {
    Unknown = "Unknown",
    User = "User",
    Admin = "Admin",
}

export class UserLoginRequest implements IUserLoginRequest {
    username?: string | null;
    password?: string | null;

    constructor(data?: IUserLoginRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.username = _data["username"] !== undefined ? _data["username"] : <any>null;
            this.password = _data["password"] !== undefined ? _data["password"] : <any>null;
        }
    }

    static fromJS(data: any): UserLoginRequest {
        data = typeof data === 'object' ? data : {};
        let result = new UserLoginRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["username"] = this.username !== undefined ? this.username : <any>null;
        data["password"] = this.password !== undefined ? this.password : <any>null;
        return data; 
    }
}

export interface IUserLoginRequest {
    username?: string | null;
    password?: string | null;
}

export enum PalletRunResult {
    PalletRun = "PalletRun",
    PalletNotExists = "PalletNotExists",
    ProgramNotExists = "ProgramNotExists",
    PalletNotReady = "PalletNotReady",
}

export class PalletRunRequest implements IPalletRunRequest {
    palletId?: string | null;
    programId?: string | null;

    constructor(data?: IPalletRunRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.palletId = _data["palletId"] !== undefined ? _data["palletId"] : <any>null;
            this.programId = _data["programId"] !== undefined ? _data["programId"] : <any>null;
        }
    }

    static fromJS(data: any): PalletRunRequest {
        data = typeof data === 'object' ? data : {};
        let result = new PalletRunRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["palletId"] = this.palletId !== undefined ? this.palletId : <any>null;
        data["programId"] = this.programId !== undefined ? this.programId : <any>null;
        return data; 
    }
}

export interface IPalletRunRequest {
    palletId?: string | null;
    programId?: string | null;
}

export class PalletFinishRequest implements IPalletFinishRequest {
    palletId?: string | null;
    rfid?: string | null;

    constructor(data?: IPalletFinishRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.palletId = _data["palletId"] !== undefined ? _data["palletId"] : <any>null;
            this.rfid = _data["rfid"] !== undefined ? _data["rfid"] : <any>null;
        }
    }

    static fromJS(data: any): PalletFinishRequest {
        data = typeof data === 'object' ? data : {};
        let result = new PalletFinishRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["palletId"] = this.palletId !== undefined ? this.palletId : <any>null;
        data["rfid"] = this.rfid !== undefined ? this.rfid : <any>null;
        return data; 
    }
}

export interface IPalletFinishRequest {
    palletId?: string | null;
    rfid?: string | null;
}

export enum PalletAddResult {
    PalletAdded = "PalletAdded",
    PalletAlreadyExists = "PalletAlreadyExists",
}

export class PalletAddRequest implements IPalletAddRequest {
    rfid?: string | null;

    constructor(data?: IPalletAddRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.rfid = _data["rfid"] !== undefined ? _data["rfid"] : <any>null;
        }
    }

    static fromJS(data: any): PalletAddRequest {
        data = typeof data === 'object' ? data : {};
        let result = new PalletAddRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["rfid"] = this.rfid !== undefined ? this.rfid : <any>null;
        return data; 
    }
}

export interface IPalletAddRequest {
    rfid?: string | null;
}

export class PalletInformation implements IPalletInformation {
    id?: string | null;
    rfid?: string | null;
    programName?: string | null;
    stepsDone!: number;
    stepsTotal!: number;
    palletStatus!: PalletStatus;

    constructor(data?: IPalletInformation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.rfid = _data["rfid"] !== undefined ? _data["rfid"] : <any>null;
            this.programName = _data["programName"] !== undefined ? _data["programName"] : <any>null;
            this.stepsDone = _data["stepsDone"] !== undefined ? _data["stepsDone"] : <any>null;
            this.stepsTotal = _data["stepsTotal"] !== undefined ? _data["stepsTotal"] : <any>null;
            this.palletStatus = _data["palletStatus"] !== undefined ? _data["palletStatus"] : <any>null;
        }
    }

    static fromJS(data: any): PalletInformation {
        data = typeof data === 'object' ? data : {};
        let result = new PalletInformation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["rfid"] = this.rfid !== undefined ? this.rfid : <any>null;
        data["programName"] = this.programName !== undefined ? this.programName : <any>null;
        data["stepsDone"] = this.stepsDone !== undefined ? this.stepsDone : <any>null;
        data["stepsTotal"] = this.stepsTotal !== undefined ? this.stepsTotal : <any>null;
        data["palletStatus"] = this.palletStatus !== undefined ? this.palletStatus : <any>null;
        return data; 
    }
}

export interface IPalletInformation {
    id?: string | null;
    rfid?: string | null;
    programName?: string | null;
    stepsDone: number;
    stepsTotal: number;
    palletStatus: PalletStatus;
}

export enum PalletStatus {
    Ready = "Ready",
    Error = "Error",
    Done = "Done",
    Waiting = "Waiting",
    Running = "Running",
}

export class ProgramAddRequest implements IProgramAddRequest {
    name?: string | null;
    description?: string | null;
    instructions?: ProgramInstruction[] | null;

    constructor(data?: IProgramAddRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            if (data.instructions) {
                this.instructions = [];
                for (let i = 0; i < data.instructions.length; i++) {
                    let item = data.instructions[i];
                    this.instructions[i] = item && !(<any>item).toJSON ? new ProgramInstruction(item) : <ProgramInstruction>item;
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            if (Array.isArray(_data["instructions"])) {
                this.instructions = [] as any;
                for (let item of _data["instructions"])
                    this.instructions!.push(ProgramInstruction.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ProgramAddRequest {
        data = typeof data === 'object' ? data : {};
        let result = new ProgramAddRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        if (Array.isArray(this.instructions)) {
            data["instructions"] = [];
            for (let item of this.instructions)
                data["instructions"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IProgramAddRequest {
    name?: string | null;
    description?: string | null;
    instructions?: IProgramInstruction[] | null;
}

export class ProgramInstruction implements IProgramInstruction {
    step!: number;
    machineMask?: string | null;
    command?: string | null;
    parameters?: string[] | null;
    workspaceSlot?: string | null;

    constructor(data?: IProgramInstruction) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.step = _data["step"] !== undefined ? _data["step"] : <any>null;
            this.machineMask = _data["machineMask"] !== undefined ? _data["machineMask"] : <any>null;
            this.command = _data["command"] !== undefined ? _data["command"] : <any>null;
            if (Array.isArray(_data["parameters"])) {
                this.parameters = [] as any;
                for (let item of _data["parameters"])
                    this.parameters!.push(item);
            }
            this.workspaceSlot = _data["workspaceSlot"] !== undefined ? _data["workspaceSlot"] : <any>null;
        }
    }

    static fromJS(data: any): ProgramInstruction {
        data = typeof data === 'object' ? data : {};
        let result = new ProgramInstruction();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["step"] = this.step !== undefined ? this.step : <any>null;
        data["machineMask"] = this.machineMask !== undefined ? this.machineMask : <any>null;
        data["command"] = this.command !== undefined ? this.command : <any>null;
        if (Array.isArray(this.parameters)) {
            data["parameters"] = [];
            for (let item of this.parameters)
                data["parameters"].push(item);
        }
        data["workspaceSlot"] = this.workspaceSlot !== undefined ? this.workspaceSlot : <any>null;
        return data; 
    }
}

export interface IProgramInstruction {
    step: number;
    machineMask?: string | null;
    command?: string | null;
    parameters?: string[] | null;
    workspaceSlot?: string | null;
}

export class ProgramInformation implements IProgramInformation {
    programId?: string | null;
    programName?: string | null;
    programDescription?: string | null;
    numberOfProgramSteps!: number;

    constructor(data?: IProgramInformation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.programId = _data["programId"] !== undefined ? _data["programId"] : <any>null;
            this.programName = _data["programName"] !== undefined ? _data["programName"] : <any>null;
            this.programDescription = _data["programDescription"] !== undefined ? _data["programDescription"] : <any>null;
            this.numberOfProgramSteps = _data["numberOfProgramSteps"] !== undefined ? _data["numberOfProgramSteps"] : <any>null;
        }
    }

    static fromJS(data: any): ProgramInformation {
        data = typeof data === 'object' ? data : {};
        let result = new ProgramInformation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["programId"] = this.programId !== undefined ? this.programId : <any>null;
        data["programName"] = this.programName !== undefined ? this.programName : <any>null;
        data["programDescription"] = this.programDescription !== undefined ? this.programDescription : <any>null;
        data["numberOfProgramSteps"] = this.numberOfProgramSteps !== undefined ? this.numberOfProgramSteps : <any>null;
        return data; 
    }
}

export interface IProgramInformation {
    programId?: string | null;
    programName?: string | null;
    programDescription?: string | null;
    numberOfProgramSteps: number;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}