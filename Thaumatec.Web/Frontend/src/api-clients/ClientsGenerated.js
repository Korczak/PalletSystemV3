/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.4.2.0 (NJsonSchema v10.1.11.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming
export class UsersFrontend {
    constructor(baseUrl, http) {
        this.jsonParseReviver = undefined;
        this.http = http ? http : window;
        this.baseUrl = baseUrl ? baseUrl : "";
    }
    register(input) {
        let url_ = this.baseUrl + "/api/users";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(input);
        let options_ = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processRegister(_response);
        });
    }
    processRegister(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 201) {
            return response.text().then((_responseText) => {
                let result201 = null;
                let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result201 = UserRegisterResponse.fromJS(resultData201);
                return result201;
            });
        }
        else if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = UserRegisterResponse.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
}
export class SelfFrontend {
    constructor(baseUrl, http) {
        this.jsonParseReviver = undefined;
        this.http = http ? http : window;
        this.baseUrl = baseUrl ? baseUrl : "";
    }
    login(request) {
        let url_ = this.baseUrl + "/api/self/login";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(request);
        let options_ = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processLogin(_response);
        });
    }
    processLogin(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : null;
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    logout() {
        let url_ = this.baseUrl + "/api/self/logout";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "POST",
            headers: {}
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processLogout(_response);
        });
    }
    processLogout(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                return;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    getCurrentUser() {
        let url_ = this.baseUrl + "/api/self";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processGetCurrentUser(_response);
        });
    }
    processGetCurrentUser(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = UserLoginResponse.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
}
export class DeviceFrontend {
    constructor(baseUrl, http) {
        this.jsonParseReviver = undefined;
        this.http = http ? http : window;
        this.baseUrl = baseUrl ? baseUrl : "";
    }
    getDevicesForUser() {
        let url_ = this.baseUrl + "/api/devices";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processGetDevicesForUser(_response);
        });
    }
    processGetDevicesForUser(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = GetUserDevicesResponse.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    addNewDevice(name, location, serialNumber) {
        let url_ = this.baseUrl + "/api/devices?";
        if (name !== undefined)
            url_ += "name=" + encodeURIComponent("" + name) + "&";
        if (location !== undefined)
            url_ += "location=" + encodeURIComponent("" + location) + "&";
        if (serialNumber !== undefined)
            url_ += "serialNumber=" + encodeURIComponent("" + serialNumber) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processAddNewDevice(_response);
        });
    }
    processAddNewDevice(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
}
export class UserRegisterResponse {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.status = _data["status"] !== undefined ? _data["status"] : null;
            this.username = _data["username"] !== undefined ? _data["username"] : null;
            this.temporaryPassword = _data["temporaryPassword"] !== undefined ? _data["temporaryPassword"] : null;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new UserRegisterResponse();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["status"] = this.status !== undefined ? this.status : null;
        data["username"] = this.username !== undefined ? this.username : null;
        data["temporaryPassword"] = this.temporaryPassword !== undefined ? this.temporaryPassword : null;
        return data;
    }
}
export var UserRegisterStatus;
(function (UserRegisterStatus) {
    UserRegisterStatus["Success"] = "Success";
    UserRegisterStatus["UserExists"] = "UserExists";
    UserRegisterStatus["UsernameIsEmpty"] = "UsernameIsEmpty";
    UserRegisterStatus["UsernameContainsWhitespace"] = "UsernameContainsWhitespace";
})(UserRegisterStatus || (UserRegisterStatus = {}));
export class UserRegisterRequest {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.username = _data["username"] !== undefined ? _data["username"] : null;
            this.role = _data["role"] !== undefined ? _data["role"] : null;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new UserRegisterRequest();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["username"] = this.username !== undefined ? this.username : null;
        data["role"] = this.role !== undefined ? this.role : null;
        return data;
    }
}
export var Role;
(function (Role) {
    Role["Unknown"] = "Unknown";
    Role["User"] = "User";
    Role["Admin"] = "Admin";
})(Role || (Role = {}));
export var UserLoginResult;
(function (UserLoginResult) {
    UserLoginResult["Success"] = "Success";
    UserLoginResult["PasswordOrUsernameError"] = "PasswordOrUsernameError";
})(UserLoginResult || (UserLoginResult = {}));
export class UserLoginRequest {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.username = _data["username"] !== undefined ? _data["username"] : null;
            this.password = _data["password"] !== undefined ? _data["password"] : null;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new UserLoginRequest();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["username"] = this.username !== undefined ? this.username : null;
        data["password"] = this.password !== undefined ? this.password : null;
        return data;
    }
}
export class UserLoginResponse {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.result = _data["result"] !== undefined ? _data["result"] : null;
            this.userId = _data["userId"] !== undefined ? _data["userId"] : null;
            this.username = _data["username"] !== undefined ? _data["username"] : null;
            this.role = _data["role"] !== undefined ? _data["role"] : null;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new UserLoginResponse();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result !== undefined ? this.result : null;
        data["userId"] = this.userId !== undefined ? this.userId : null;
        data["username"] = this.username !== undefined ? this.username : null;
        data["role"] = this.role !== undefined ? this.role : null;
        return data;
    }
}
export class GetUserDevicesResponse {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
            if (data.devices) {
                this.devices = [];
                for (let i = 0; i < data.devices.length; i++) {
                    let item = data.devices[i];
                    this.devices[i] = item && !item.toJSON ? new GetUserDeviceItem(item) : item;
                }
            }
        }
    }
    init(_data) {
        if (_data) {
            if (Array.isArray(_data["devices"])) {
                this.devices = [];
                for (let item of _data["devices"])
                    this.devices.push(GetUserDeviceItem.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new GetUserDevicesResponse();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.devices)) {
            data["devices"] = [];
            for (let item of this.devices)
                data["devices"].push(item.toJSON());
        }
        return data;
    }
}
export class GetUserDeviceItem {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.name = _data["name"] !== undefined ? _data["name"] : null;
            this.lastUpdateDateTime = _data["lastUpdateDateTime"] !== undefined ? _data["lastUpdateDateTime"] : null;
            this.lastPrintDateTime = _data["lastPrintDateTime"] !== undefined ? _data["lastPrintDateTime"] : null;
            this.status = _data["status"] !== undefined ? _data["status"] : null;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new GetUserDeviceItem();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name !== undefined ? this.name : null;
        data["lastUpdateDateTime"] = this.lastUpdateDateTime !== undefined ? this.lastUpdateDateTime : null;
        data["lastPrintDateTime"] = this.lastPrintDateTime !== undefined ? this.lastPrintDateTime : null;
        data["status"] = this.status !== undefined ? this.status : null;
        return data;
    }
}
export var DeviceStatus;
(function (DeviceStatus) {
    DeviceStatus["NotAuthenticated"] = "NotAuthenticated";
    DeviceStatus["Active"] = "Active";
    DeviceStatus["Printing"] = "Printing";
    DeviceStatus["Aborting"] = "Aborting";
})(DeviceStatus || (DeviceStatus = {}));
export class ApiException extends Error {
    constructor(message, status, response, headers, result) {
        super();
        this.isApiException = true;
        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }
    static isApiException(obj) {
        return obj.isApiException === true;
    }
}
function throwException(message, status, response, headers, result) {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}
//# sourceMappingURL=ClientsGenerated.js.map